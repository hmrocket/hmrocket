package com.hmrocket.magicpoker;

import android.content.Context;

import com.google.android.gms.analytics.GoogleAnalytics;
import com.google.android.gms.analytics.HitBuilders;
import com.google.android.gms.analytics.Logger;
import com.google.android.gms.analytics.Tracker;
import com.google.android.gms.analytics.ecommerce.Product;
import com.google.android.gms.analytics.ecommerce.ProductAction;
import com.hmrocket.poker.RoundPhase;

import java.util.HashMap;
import java.util.Map;

// @formatter:off
/**
 *
 * <p>
 * A collection of Google Analytics trackers. Fetch the tracker you need using
 * {@code AnalyticsTrackers.getInstance().get(...)}.
 * This code was generated by Android Studio but can be safely modified by
 * hand at this point.
 * <p/>
 *
 * Tracked Events:
 * 	<ul>
 * 		<li>Skip</li>
 * 		<li>Start</li>
 * 		<li>Level-up</li>
 * 		<li>Sound-pref</li>
 * 		<li>Music-pre</li>
 * 		<li></li>
 * <ul/>
 *
 */
// @formatter:on
public final class AnalyticsTrackers {

	//Constant values
	private static final String CATEGORY_GAME_PLAY = "GamePlay";
	private static final String CATEGORY_COMPLETIONS = "Completions";
	private static final String CATEGORY_PREFERENCE = "Preference";
	private static final String ON = "ON";
	private static final String OFF = "OFF";
	private static AnalyticsTrackers sInstance;
	private final Map<Target, Tracker> mTrackers = new HashMap<>();
	private final Context mContext;
	/**
	 * Don't instantiate directly - use {@link #getInstance()} instead.
	 */
	private AnalyticsTrackers(Context context) {
		mContext = context.getApplicationContext();
	}

	public static synchronized void initialize(Context context) {
		if (sInstance != null) {
			throw new IllegalStateException("Extra call to initialize analytics trackers");
		}

		sInstance = new AnalyticsTrackers(context);
	}

	/**
	 * Track user pressing skip button.
	 *
	 * @param roundPhase Represent at which Round user pressed skip button
	 */
	public static void skipEvent(RoundPhase roundPhase) {
		getAppTracker().send(new HitBuilders.EventBuilder()
				.setCategory(CATEGORY_GAME_PLAY)
				.setAction("Skip")
				.setLabel(roundPhase.name())
				.build());
	}

	/**
	 * @return Google Analytic tracker for the target App
	 */
	public static synchronized Tracker getAppTracker() {
		return getInstance().get(AnalyticsTrackers.Target.APP);
	}

	/**
	 * Tracker getter
	 *
	 * @param target define the tracking target
	 * @return Google Analytic tracker for specific target
	 */
	public synchronized Tracker get(Target target) {
		if (!mTrackers.containsKey(target)) {
			Tracker tracker;
			switch (target) {
				case APP:
					tracker = GoogleAnalytics.getInstance(mContext).newTracker(R.xml.app_tracker);
					tracker.enableAdvertisingIdCollection(true);
					// Set tracker currency to US Dollars.
					tracker.set("&cu", "USD");
					// tracker.enableAutoActivityTracking(true);
					if (MyApp.isDebugMode(mContext)) {
						// activate Debug features (dry run and verbose logger)
						GoogleAnalytics.getInstance(mContext).setDryRun(true);
						//  To enable DEBUG level run the following adb command on your device or emulator:
						// adb shell setprop log.tag.GAv4 DEBUG
						GoogleAnalytics.getInstance(mContext).getLogger().setLogLevel(Logger.LogLevel.VERBOSE);
					}
					break;
				default:
					throw new IllegalArgumentException("Unhandled analytics target " + target);
			}
			mTrackers.put(target, tracker);
		}

		return mTrackers.get(target);
	}

	public static synchronized AnalyticsTrackers getInstance() {
		if (sInstance == null) {
			throw new IllegalStateException("Call initialize() before getInstance()");
		}

		return sInstance;
	}

	/**
	 * Track user pressing start button.
	 */
	public static void startEvent() {
		getAppTracker().send(new HitBuilders.EventBuilder()
				.setCategory(CATEGORY_GAME_PLAY)
				.setAction("Start")
						//.setValue(1) // Not needed, by default the value is one
				.build());
	}

	/**
	 * Track user level progress.
	 * Note: a new session is manually create
	 *
	 * @param level User level (bot levels and difficulty between 1 to 100)
	 */
	public static void levelUpEvent(int level) {
		getAppTracker().send(new HitBuilders.EventBuilder()
				.setCategory(CATEGORY_COMPLETIONS)
				.setAction("Level-up")
				.setLabel(Integer.toString(level))
						// make sure to star new session when the custom dimension (Level) change.
						// For more https://support.google.com/analytics/answer/2709828?hl=en#processing and https://support.google.com/analytics/answer/2709828?hl=en#example-hit
				.setNewSession()
				.setCustomDimension(1, "level_" + level)
				.build());
	}

	/**
	 * Track user sound effect preference.
	 *
	 * @param on true if the user set sound effect preference to ON, false if muted.
	 */
	public static void soundPreferenceEvent(boolean on) {
		// XXX It seems your just collecting your data for the sake of it.
		getAppTracker().send(new HitBuilders.EventBuilder()
				.setCategory(CATEGORY_PREFERENCE)
				.setAction("Sound")
				.setLabel(on ? ON : OFF)
				.build());
	}

	/**
	 * Track user music preference.
	 *
	 * @param on true if the user set music preference to ON, false if muted.
	 */
	public static void musicPreferenceEvent(boolean on) {
		// XXX It seems your just collecting your data for the sake of it.
		getAppTracker().send(new HitBuilders.EventBuilder()
				.setCategory(CATEGORY_PREFERENCE)
				.setAction("Music")
				.setLabel(on ? ON : OFF)
				.build());
	}

	/**
	 * Track user level progress. By setting Custom Dimension Index 1, note cd level has user scope
	 *
	 * @param level User level (bot levels and difficulty between 1 to 100)
	 */
	public static void setUserLevel(int level) {
		getAppTracker().set("&cd1", Integer.toString(level));
	}

	/**
	 * track user Social interaction specifically (Facebook/Google) game page like
	 */
	public static void pageLike(Social social) {
		getAppTracker().send(new HitBuilders.SocialBuilder()
				.setNetwork(social.toString())
				.setAction(social == Social.FACEBOOK ? "Like" : "Follow")
				.build());
	}

	/**
	 * track user Social interaction specifically (Facebook/Google) game page share
	 */
	public static void pageShare(Social social) {
		getAppTracker().send(new HitBuilders.SocialBuilder()
				.setNetwork(social.toString())
				.setAction("Share")
				.setTarget("Page")
				.build());
	}

	/**
	 * track user Social interaction specifically game score share on (Facebook/Google)
	 */
	public static void scoreShare(Social social) {
		getAppTracker().send(new HitBuilders.SocialBuilder()
				.setNetwork(social.toString())
				.setAction("Share")
				.setTarget("Score")
				.build());
	}

	/**
	 * An example of purchase tracking
	 */
	public static void purchase() {
		long priceInCent = 100;
		float price = 1.00f;
		Product product = new Product()
				.setId("P000")
				.setName("Skull table")
				.setCategory("Table")
				.setVariant("black")
				.setPrice(price)
				.setQuantity(1);
		ProductAction productAction = new ProductAction(ProductAction.ACTION_PURCHASE)
				.setTransactionId("T000")
				.setTransactionAffiliation("Google Wallet")
				.setTransactionRevenue(0.70)
				.setTransactionTax(.30);

		// Add the transaction data to the event.
		HitBuilders.EventBuilder builder = new HitBuilders.EventBuilder()
				.setCategory("In-Game Store")
				.setAction("Purchase")
				.setValue(priceInCent)
				.addProduct(product)
				.setProductAction(productAction);
		// Send the transaction data with the event.
		getAppTracker().send(builder.build());
	}

	public enum Social {
		FACEBOOK("Facebook"), GOOGLE("Google");

		private String name;

		Social(String name) {
			this.name = name;
		}

		@Override
		public String toString() {
			return name;
		}
	}


	public enum Target {
		APP,
		// tracker for all the similar event cross apps
		// GLOBAL_TRACKER,
		// Tracker for All E commerce tracking
		// E_COMMERCE_TRACKER
	}

}